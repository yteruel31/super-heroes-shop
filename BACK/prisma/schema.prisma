// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  customerNumber Int       @unique
  email          String    @unique
  firstname      String
  lastname       String
  password       String    @unique
  avatar         String?
  banner         String?
  role           Role
  addresses      Address[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  carts          Cart[]
  orders         Order[]
  reviews        Review[]
  tickets        Ticket[]
  comments       Comment[]
}

model Comic {
  id                 Int                @id @default(autoincrement())
  idMarvelApi        Int                @unique
  title              String
  thumbnail          String
  price              Float
  rating             Float?
  availabilityStatus AvailabilityStatus
  serie              Serie              @relation(fields: [serieId], references: [id])
  characters         Character[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime?          @updatedAt
  serieId            Int
  carts              Cart[]
  orders             Order[]
  reviews            Review[]
}

model Serie {
  id          Int         @id @default(autoincrement())
  idMarvelApi Int         @unique
  title       String
  comics      Comic[]
  characters  Character[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Character {
  id          Int       @id @default(autoincrement())
  idMarvelApi Int       @unique
  name        String
  comics      Comic[]
  series      Serie[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Review {
  id        Int       @id @default(autoincrement())
  rating    Int
  content   String
  user      User      @relation(fields: [userId], references: [id])
  comic     Comic     @relation(fields: [comicId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  comicId   Int
  userId    Int
}

model Ticket {
  id          Int       @id @default(autoincrement())
  number      Int       @unique
  subject     String
  description String
  state       State
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      Int
  comments    Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  userId    Int
  ticketId  Int
}

model Cart {
  id        Int       @id @default(autoincrement())
  comics    Comic[]
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  userId    Int
}

model Order {
  id        Int       @id @default(autoincrement())
  comics    Comic[]
  user      User      @relation(fields: [userId], references: [id])
  adress    Address   @relation(fields: [addressId], references: [id])
  step      Step
  gift      Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  userId    Int
  addressId Int
}

model Address {
  id           Int       @id @default(autoincrement())
  name         String
  firstname    String
  lastname     String
  streetAdress String
  aptNumber    String?
  state        String
  zip          String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  user         User?     @relation(fields: [userId], references: [id])
  userId       Int?
  orders       Order[]
}

enum Role {
  USER
  ADMIN
}

enum AvailabilityStatus {
  IN_STOCK
  OUT_OF_STOCK
}

enum Step {
  VALIDATE
}

enum State {
  OPEN
  CLOSE
}
